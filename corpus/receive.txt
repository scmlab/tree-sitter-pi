==================
Simple
==================

name = c?x . end

---

(program
    (proc_declaration (process_name)
        (recv (name) (pattern (name))
            (end))))

==================
Complex - 1
==================

name = c?{ A -> end }

---

(program
    (proc_declaration (process_name)
        (recv (name) (pattern (label))
            (end))))

==================
Complex - 2
==================

name = c?{ A -> end
         ; B -> end
         }

---

(program
    (proc_declaration (process_name)
        (recv (name)
            (pattern (label)) (end)
            (pattern (label)) (end))))

==================
Complex - 3
==================

name = c?{ A -> c?{ A -> end
                  ; B -> end
                  }
         ; B -> end
         }

---

(program
    (proc_declaration (process_name)
        (recv (name)
            (pattern (label)) (recv (name)
                    (pattern (label)) (end)
                    (pattern (label)) (end))
            (pattern (label)) (end))))

==================
Parenthesized
==================

name = (c?x . end)

---

(program
    (proc_declaration (process_name)
        (recv (name) (pattern (name))
            (end))))

==================
Call
==================

name = c?x . name

---

(program
    (proc_declaration (process_name)
        (recv (name) (pattern (name))
            (call (process_name)))))

==================
New channel - 1
==================

name = (nu x) c?x . end

---

(program
    (proc_declaration (process_name)
        (nu (name)
            (recv (name) (pattern (name))
                (end)))))

==================
New channel - 2
==================

name =  c?x . (nu x) end

---

(program
    (proc_declaration (process_name)
        (recv (name) (pattern (name))
            (nu (name)
                (end)))))

==================
Parellel - 1
==================

name =  (nu x) end | end

---

(program
    (proc_declaration (process_name)
        (par
            (nu (name)
                (end))
            (end))))

==================
Parellel - 2
==================

name =  (nu x) (end | end)

---

(program
    (proc_declaration (process_name)
        (nu (name)
            (par
                (end)
                (end)))))
