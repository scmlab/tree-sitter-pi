==================
Simple - integer
==================

name = c[3] . end

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (end))))

==================
Simple - name
==================

name = c[d] . end

---

(program
    (proc_declaration (process_name)
        (send (name) (variable (name))
            (end))))

==================
Simple - label
==================

name = c[HAHA] . end

---

(program
    (proc_declaration (process_name)
        (send (name) (label)
            (end))))

==================
Parenthesized
==================

name = (c[3] . end)

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (end))))

==================
Call
==================

name = c[3] . name

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (call (process_name)))))

==================
New channel - 1
==================

name = (nu x) c[3] . end

---

(program
    (proc_declaration (process_name)
        (nu (name)
            (send (name) (integer)
                (end)))))

==================
New channel - 2
==================

name =  c[3] . (nu x) end

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (nu (name)
                (end)))))

==================
Parellel - 1
==================

name =  x[3] . end | end

---

(program
    (proc_declaration (process_name)
        (par
            (send (name) (integer)
                (end))
            (end))))

==================
Parellel - 2
==================

name = x[3] . end | x[4] . end

---

(program
    (proc_declaration (process_name)
        (par
            (send (name) (integer)
                (end))
            (send (name) (integer)
                (end)))))

==================
Receive - 1
==================

name =  x[3] . end | x?y . end

---

(program
    (proc_declaration (process_name)
        (par
            (send (name) (integer)
                (end))
            (recv (name)
                (clause (pattern (name)) (end))))))

==================
Receive - 2
==================

name =  x[3] . x?y . end

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (recv (name)
                (clause (pattern (name)) (end))))))

==================
Replication
==================

name =  x[3] . * end

---

(program
    (proc_declaration (process_name)
        (send (name) (integer)
            (repl (end)))))
